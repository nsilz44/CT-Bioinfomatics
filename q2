#!/usr/bin/python
import time
import sys
import numpy as np

# YOUR FUNCTIONS GO HERE -------------------------------------
def score(i,j,seq1,seq2):
    al = seq1[i]
    bl = seq2[j]
    if al != bl:
        ad = -3
    elif al == 'A':
        ad = 3
    elif al == 'C':
        ad = 2
    elif al == 'G':
        ad = 1
    #last is 'T'
    else:
        ad = 2
    return ad
    
#initailizes matrix with zeros
def matrix(seq1,seq2):
    seq1 = '-' + seq1
    seq2 = '-' + seq2
    #intializes best_score
    best_score = 0
    #initalizes matrix m and matrix back with zeros
    m = np.zeros((len(seq1),len(seq2)))
    # in matrix back 
    # 0 => end sequence
    # 1 => go diagonally
    # 2 => go left
    # 3 => go up
    back = np.zeros((len(seq1),len(seq2)))
    for j in range(1,len(seq2)):
        for i in range(1,len(seq1)):
            a = m[i-1,j] - 4
            b = m[i,j-1] - 4
            c = score(i,j,seq1,seq2) + m[i-1,j-1]
            m[i,j] = max(a,b,c,0)
            
            if m[i,j] == c:
                back[i,j] = 1
            elif m[i,j] == a:
                back[i,j] = 2
            elif m[i,j] == b:
                back[i,j] = 3
            # else its a zero which is already in matrix
            
            if m[i,j] > best_score:
                best_score = m[i,j]
                y = i
                z = j
    alignSeq1 = ''
    alignSeq2 = ''
    while back[y,z] != 0:
        
        if back[y,z] == 1:
            alignSeq1 = seq1[y] + alignSeq1
            alignSeq2 = seq2[z] + alignSeq2
            y = y - 1
            z = z - 1
        elif back[y,z] == 3:
            alignSeq1 = '-' + alignSeq1
            alignSeq2 = seq2[z] + alignSeq2
            y = y - 1
        elif back[y,z] == 2:
            alignSeq2 = '-' + alignSeq2
            alignSeq1 = seq1[y] + alignSeq1
            z = z - 1
    best_alignment = [alignSeq1,alignSeq2]    
    return best_score, best_alignment
    

        
# ------------------------------------------------------------



# DO NOT EDIT ------------------------------------------------
# Given an alignment, which is two strings, display it

def displayAlignment(alignment):
    string1 = alignment[0]
    string2 = alignment[1]
    string3 = ''
    for i in range(min(len(string1),len(string2))):
        if string1[i]==string2[i]:
            string3=string3+"|"
        else:
            string3=string3+" "
    print('Alignment ')
    print('String1: '+string1)
    print('         '+string3)
    print('String2: '+string2+'\n\n')

# ------------------------------------------------------------


# DO NOT EDIT ------------------------------------------------
# This opens the files, loads the sequences and starts the timer
file1 = open(sys.argv[1], 'r')
seq1=file1.read()
file1.close()
file2 = open(sys.argv[2], 'r')
seq2=file2.read()
file2.close()
start = time.time()

#-------------------------------------------------------------

best_score , best_alignment = matrix(seq1,seq2)
# YOUR CODE GOES HERE ----------------------------------------
# The sequences are contained in the variables seq1 and seq2 from the code above.
# To work with the printing functions below the best local alignment should be called best_alignment and its score should be called best_score. 



#-------------------------------------------------------------


# DO NOT EDIT ------------------------------------------------
# This calculates the time taken and will print out useful information 
stop = time.time()
time_taken=stop-start

# Print out the best
print('Time taken: '+str(time_taken))
print('Best (score '+str(best_score)+'):')
displayAlignment(best_alignment)

#-------------------------------------------------------------
